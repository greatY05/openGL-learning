#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    sampler2D emission;
    float shininess;
}; 

struct Light {
    vec3 direction;  
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;


    //spotlight
    float cutOff;
    float outerCutOff;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
    vec3 lightDir = normalize(light.position - FragPos);
    // ambient   
    vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;  
    
    // specular
    //vec3 viewDir = normalize(viewPos - FragPos);
    //vec3 reflectDir = reflect(-lightDir, norm);  
    //float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    //vec3 specular = light.specular * spec * texture(material.specular, TexCoords).rgb;  
    //blinn phong specularness
    vec3 specular = vec3(0.0f);
    if (diffuse!= 0.0f) {
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);
        vec3 halfwayVec = normalize(viewDir + lightDir);
        float spec = pow(max(dot(norm, halfwayVec), 0.0), material.shininess);
        specular = light.specular * spec * texture(material.specular, TexCoords).rgb;  
    }

    //attenuation
    float distance = length(light.position - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance*distance)); // formula for light distance calc
    
    //gradient between inner and outer radiuses in the flashlight mode
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);


    ambient *= intensity;
    diffuse *= intensity;
    specular *= intensity;


    // to layer emission map below specular map
    vec3 specColor = texture(material.specular, TexCoords).rgb;
    vec3 emissionMask = vec3(step(specColor.r + specColor.g + specColor.b, 0.1 * 3.0));
   
    //emission
    vec3 emission = texture(material.emission,TexCoords).rgb * emissionMask;

    vec3 result = ambient + diffuse + specular+ emission;
    FragColor = vec4(result, 1.0);


} 